function X = sudoku(X)
% SUDOKU  Solve Sudoku using recursive backtracking.
%   sudoku(X), expects a 9-by-9 array X.
% Fill in all “singletons”.
% C is a cell array of candidate vectors for each cell.
% s is the first cell, if any, with one candidate.
% e is the first cell, if any, with no candidates.

[C,s,e] = candidates(X);
% 将所有唯一确定的值填完
while ~isempty(s) && isempty(e)
%     disp('有唯一值');
    s
    X(s) = C{s}
    [C,s,e] = candidates(X);
end

% 存在缺值但无候选值的情况，返回
if ~isempty(e)
%     disp('无路可走');
    return
end

% 递归调用
if any(X(:) == 0)             % 如果X存在缺值
    Y = X;
    z = find(X(:) == 0,1);    % 返回第一个值为0的索引值
    z
    for r = [C{z}]            % 遍历所有候选值
        X = Y;                
        X(z) = r              % 插入一个暂定值
        X = sudoku(X);        % 递归调用
        if all(X(:) > 0)      % 若所有值都填完则返回
            return
        end
    end
end
% ------------------------------
    function [C,s,e] = candidates(X)        
        C = cell(9,9);
        tri = @(k) 3*ceil(k/3-1) + (1:3);  %九宫格
        for j = 1:9
            for i = 1:9
                if X(i,j)==0
                    z = 1:9;
                    z(nonzeros(X(i,:))) = 0;
                    z(nonzeros(X(:,j))) = 0;
                    z(nonzeros(X(tri(i),tri(j)))) = 0;
                    C{i,j} = nonzeros(z)';
                end
            end
        end
        L = cellfun(@length,C);   % Number of candidates. %代填格子的所有可能值的个数
        % X=0代表缺值，L=0表示已确定值
        s = find(X==0 & L==1,1);  %缺值且候选值唯一
        e = find(X==0 & L==0,1);  %缺值但无候选值
    end % candidates
end % sudoku

% 转载 http://cn.mathworks.com/company/newsletters/articles/solving-sudoku-with-matlab.html
% 转载 http://www.ilovematlab.cn/thread-294985-1-1.html




